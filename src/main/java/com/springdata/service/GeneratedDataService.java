package com.springdata.service;

import java.math.BigDecimal;
import java.time.Instant;
import java.time.ZoneId;
import java.util.LinkedHashSet;

import org.springframework.stereotype.Service;

import com.github.javafaker.Faker;
import com.springdata.domain.CargoModel;
import com.springdata.domain.FuncionarioModel;
import com.springdata.domain.UnidTrabalhoModel;
import com.springdata.repository.CargoRepository;
import com.springdata.repository.FuncionarioRepository;
import com.springdata.repository.UnidTrabalhoRepository;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
@RequiredArgsConstructor
public class GeneratedDataService {

	private final CargoRepository cargoRepository;

	private final UnidTrabalhoRepository unidTrabalhoRepository;
	
	private final FuncionarioRepository funcionarioRepository;
	
	public LinkedHashSet<Object> autoGeneratedCargos(Integer qtd) {
				
		var hashSet = new LinkedHashSet <Object>();
		
		long startTime = System.currentTimeMillis();
		var tempInicio = Instant.now().atZone(ZoneId.of("America/Sao_Paulo"));		
				
		for (int x = 0; x <= qtd; x++) {

			var fake = new Faker();

			try {
				var novoCargo = CargoModel.builder()
						.nome(fake.job().title())
						.atividades(fake.job().field())
						.salarioBase(new BigDecimal(fake.number().numberBetween(1000, 15000)))
						.build();
				
				cargoRepository.save(novoCargo);				
				hashSet.add(novoCargo);				

			} catch (Exception e) {
				log.info("Error -  autoGeneratedCargos  - msg : {}", e.getLocalizedMessage());				
				hashSet.add( "Falha ---- objetc :" + x + "menssage error :"  + e);
			}
		}
		
		hashSet.add("Tempo de inicio:" +  tempInicio);		
		hashSet.add("Tempo de Final: " + Instant.now().atZone(ZoneId.of("America/Sao_Paulo")));			
		hashSet.add("Durancao em milissegundos :" + ((System.currentTimeMillis() - startTime)) );
		
		return hashSet;
	}
	
	public LinkedHashSet<Object> autoGeneratedUnidTrabalho(Integer qtd){
				
		var hashSet = new LinkedHashSet <Object>();
		
		long startTime = System.currentTimeMillis();
		var tempInicio = Instant.now().atZone(ZoneId.of("America/Sao_Paulo"));		
		
		for (int x = 0; x <= qtd; x++) {
			
			var fake = new Faker();

			try {
				var novaUnidTrab = UnidTrabalhoModel.builder()
						.nome(fake.address().firstName())
						.descricao("unidade de: " + fake.address().cityName() + fake.address().country())
						.endereco(fake.address().fullAddress())
						.build();
				
				unidTrabalhoRepository.save(novaUnidTrab);				
				hashSet.add(novaUnidTrab);				

			} catch (Exception e) {
				log.info("Error -  autoGeneratedUnidTrabalho  - msg : {}", e.getLocalizedMessage());				
				hashSet.add( "Falha ---- objetc :" + x + "menssage error :"  + e);
			}			
		}
		
		hashSet.add("Tempo de inicio:" +  tempInicio);		
		hashSet.add("Tempo de Final: " + Instant.now().atZone(ZoneId.of("America/Sao_Paulo")));			
		hashSet.add("Durancao em milissegundos :" + ((System.currentTimeMillis() - startTime)) );
		
		return hashSet;		
	}
	
	public LinkedHashSet<Object> autoGeneratedFuncionario(Integer qtd){
		
		var hashSet = new LinkedHashSet <Object>();
		
		long startTime = System.currentTimeMillis();
		var tempInicio = Instant.now().atZone(ZoneId.of("America/Sao_Paulo"));		
		
		for (int x = 0; x <= qtd; x++) {
			
			var fake = new Faker();

			try {
				
				var listCargo = cargoRepository.findRadomCargosLimit(10);
				
				var listUnidTrab = unidTrabalhoRepository.findRadomUnidTrabLimit(fake.number().numberBetween(1, 10));
				
				var novoFunc = FuncionarioModel.builder()
						.nome(fake.name().fullName())
						.cpf(Long.toString(fake.number().randomNumber(11, true)))
						.dtContratacao(fake.date().birthday())
						.unidadeTrabalhos(listUnidTrab)
						.build();
				
				listCargo.stream().findAny().ifPresentOrElse( (v) -> {
					novoFunc.setCargo(v); novoFunc.setSalario(v.getSalarioBase());
				}, () ->{});				
				
				funcionarioRepository.save(novoFunc);			
				hashSet.add(novoFunc);				

			} catch (Exception e) {
				log.info("Error -  autoGeneratedFuncionario  - msg : {}", e.getLocalizedMessage());				
				hashSet.add( "Falha ---- objetc :" + x + "menssage error :"  + e);
			}			
		}
		
		hashSet.add("Tempo de inicio:" +  tempInicio);		
		hashSet.add("Tempo de Final: " + Instant.now().atZone(ZoneId.of("America/Sao_Paulo")));			
		hashSet.add("Durancao em milissegundos :" + ((System.currentTimeMillis() - startTime)) );
		
		return hashSet;		
	}

}
